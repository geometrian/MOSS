#pragma once

/*
https://en.cppreference.com/w/cpp/header/limits
https://en.cppreference.com/w/cpp/types/numeric_limits
INCOMPLETE
*/

//#include "../libmoss-stdc/__arch.h"
#include "../libmoss-stdc/limits.h" //TODO: no?



namespace std
{



enum float_denorm_style
{
	denorm_indeterminate = -1,
	denorm_absent        =  0,
	denorm_present       =  1
};

enum float_round_style
{
	round_indeterminate       = -1,
	round_toward_zero         =  0,
	round_to_nearest          =  1,
	round_toward_infinity     =  2,
	round_toward_neg_infinity =  3,
};



template< class T > struct numeric_limits
{
	static constexpr bool is_specialized = false;

	static constexpr int radix = 0;

	static constexpr int digits       = 0;
	static constexpr int digits10     = 0;
	#if __MOSS_CPP__ >= 2011
	static constexpr int max_digits10 = 0;
	#endif

	static constexpr int min_exponent   = 0;
	static constexpr int min_exponent10 = 0;
	static constexpr int max_exponent   = 0;
	static constexpr int max_exponent10 = 0;

	static constexpr bool is_signed  = false;
	static constexpr bool is_exact   = false;
	static constexpr bool is_bounded = false;
	static constexpr bool is_modulo  = false;
	static constexpr bool is_integer = false;
	static constexpr bool is_iec559  = false;

	static constexpr bool has_denorm_loss   = false;
	static constexpr bool has_infinity      = false;
	static constexpr bool has_quiet_NaN     = false;
	static constexpr bool has_signaling_NaN = false;
	static constexpr bool traps             = false;
	static constexpr bool tinyness_before   = false;
	static constexpr float_denorm_style has_denorm  = denorm_absent    ;
	static constexpr float_round_style  round_style = round_toward_zero;

	static constexpr T min() noexcept { return T(); }
	static constexpr T max() noexcept { return T(); }
	static constexpr T lowest() noexcept { return T(); }

	static constexpr T epsilon    () noexcept { return T(); }
	static constexpr T round_error() noexcept { return T(); }

	static constexpr T denorm_min   () noexcept { return T(); }
	static constexpr T infinity     () noexcept { return T(); }
	static constexpr T quiet_NaN    () noexcept { return T(); }
	static constexpr T signaling_NaN() noexcept { return T(); }
};

template< class T > struct numeric_limits< T const          >;
template< class T > struct numeric_limits< T volatile       >;
template< class T > struct numeric_limits< T const volatile >;

struct __moss_numeric_limits_num
{
	static constexpr bool is_specialized = true;

	static constexpr int radix = 2;
};

struct __moss_numeric_limits_fp : __moss_numeric_limits_num
{
	static constexpr bool is_signed  = true ;
	static constexpr bool is_exact   = false;
	static constexpr bool is_bounded = false;
	static constexpr bool is_modulo  = false;
	static constexpr bool is_integer = false;
	static constexpr bool is_iec559  = true ;

	static constexpr bool has_denorm_loss   = false;
	static constexpr bool has_infinity      = true ;
	static constexpr bool has_quiet_NaN     = true ;
	static constexpr bool has_signaling_NaN = false;
	static constexpr bool traps             = false;
	static constexpr bool tinyness_before   = false;
	static constexpr float_denorm_style has_denorm  = denorm_present  ;
	static constexpr float_round_style  round_style = round_to_nearest;
};

template <> struct numeric_limits<float> : __moss_numeric_limits_fp
{
	static constexpr int digits         =   24; //`FLT_MANT_DIG`
	static constexpr int digits10       =    6; //`FLT_DIG`
	static constexpr int max_digits10   =    9; //`FLT_DECIMAL_DIG`

	static constexpr int min_exponent   = -125; //`FLT_MIN_EXP`
	static constexpr int min_exponent10 =  -37; //`FLT_MIN_10_EXP`
	static constexpr int max_exponent   =  128; //`FLT_MAX_EXP`
	static constexpr int max_exponent10 =   38; //`FLT_MAX_10_EXP`

	static constexpr float min() noexcept { return 1.175494351e-38f; } //`FLT_MIN`
	static constexpr float max() noexcept { return 3.402823466e+38f; } //`FLT_MAX`
	static constexpr float lowest() noexcept { return -max(); }

	static constexpr float epsilon    () noexcept { return 1.192092896e-07f; } //`FLT_EPSILON`
	static constexpr float round_error() noexcept { return 0.5f; }

	static constexpr float denorm_min   () noexcept { return 1.401298464e-45f; } //`FLT_TRUE_MIN`
	static constexpr float infinity     () noexcept { return __builtin_huge_valf(); }
	static constexpr float quiet_NaN    () noexcept { return __builtin_nanf("0"); }
	static constexpr float signaling_NaN() noexcept { return __builtin_nansf("1"); }
};

template <> struct numeric_limits<double> : __moss_numeric_limits_fp
{
	static constexpr int digits         =    53; //`DBL_MANT_DIG`
	static constexpr int digits10       =    15; //`DBL_DIG`
	static constexpr int max_digits10   =    17; //`DBL_DECIMAL_DIG`

	static constexpr int min_exponent   = -1021; //`DBL_MIN_EXP`
	static constexpr int min_exponent10 =  -307; //`DBL_MIN_10_EXP`
	static constexpr int max_exponent   =  1024; //`DBL_MAX_EXP`
	static constexpr int max_exponent10 =   308; //`DBL_MAX_10_EXP`

	static constexpr double min() noexcept { return 2.2250738585072014e-308; } //`DBL_MIN`
	static constexpr double max() noexcept { return 1.7976931348623158e+308; } //`DBL_MAX`
	static constexpr double lowest() noexcept { return -max(); }

	static constexpr double epsilon    () noexcept { return 2.2204460492503131e-016; } //`DBL_EPSILON`
	static constexpr double round_error() noexcept { return 0.5; }

	static constexpr double denorm_min   () noexcept { return 4.9406564584124654e-324; } //`DBL_TRUE_MIN`
	static constexpr double infinity     () noexcept { return __builtin_huge_val(); }
	static constexpr double quiet_NaN    () noexcept { return __builtin_nan("0"); }
	static constexpr double signaling_NaN() noexcept { return __builtin_nans("1"); }
};

template <> struct numeric_limits<long double> : __moss_numeric_limits_fp
{
	static constexpr int digits         =    53; //`LDBL_MANT_DIG`
	static constexpr int digits10       =    15; //`LDBL_DIG`
	static constexpr int max_digits10   =    17; //`DBL_DECIMAL_DIG`

	static constexpr int min_exponent   = -1021; //`LDBL_MIN_EXP`
	static constexpr int min_exponent10 =  -307; //`LDBL_MIN_10_EXP`
	static constexpr int max_exponent   =  1024; //`LDBL_MAX_EXP`
	static constexpr int max_exponent10 =   308; //`LDBL_MAX_10_EXP`

	static constexpr long double min() noexcept { return 2.2250738585072014e-308L; } //`LDBL_MIN`
	static constexpr long double max() noexcept { return 1.7976931348623158e+308L; } //`LDBL_MAX`
	static constexpr long double lowest() noexcept { return -max(); }

	static constexpr long double epsilon    () noexcept { return 2.2204460492503131e-016L; } //`LDBL_EPSILON`
	static constexpr long double round_error() noexcept { return 0.5L; }

	static constexpr long double denorm_min   () noexcept { return 4.9406564584124654e-324L; } //`LDBL_TRUE_MIN`
	static constexpr long double infinity     () noexcept { return __builtin_huge_val(); }
	static constexpr long double quiet_NaN    () noexcept { return __builtin_nan("0"); }
	static constexpr long double signaling_NaN() noexcept { return __builtin_nans("1"); }
};

template< class T >
struct __moss_numeric_limits_integral : __moss_numeric_limits_num
{
	static constexpr int digits       = 8*sizeof(T) - 1;

	//Doesn't make sense
	static constexpr int min_exponent   = 0;
	static constexpr int min_exponent10 = 0;
	static constexpr int max_exponent   = 0;
	static constexpr int max_exponent10 = 0;

	static constexpr bool is_signed  = is_signed_v<T>;
	static constexpr bool is_exact   = true ;
	static constexpr bool is_bounded = true ;
	static constexpr bool is_modulo  = is_unsigned_v<T>;
	static constexpr bool is_integer = true ;
	static constexpr bool is_iec559  = false;

	static constexpr bool has_denorm_loss   = false;
	static constexpr bool has_infinity      = false;
	static constexpr bool has_quiet_NaN     = false;
	static constexpr bool has_signaling_NaN = false;
	static constexpr bool traps             = false;
	static constexpr bool tinyness_before   = false;
	static constexpr float_denorm_style has_denorm  = denorm_absent    ;
	static constexpr float_round_style  round_style = round_toward_zero;

	static constexpr T epsilon    () noexcept { return T(); }
	static constexpr T round_error() noexcept { return T(); }

	static constexpr T denorm_min   () noexcept { return T(); }
	static constexpr T infinity     () noexcept { return T(); }
	static constexpr T quiet_NaN    () noexcept { return T(); }
	static constexpr T signaling_NaN() noexcept { return T(); }
};


#define MOSS_DEF_INT( TYPE, DIG10,DIG10MAX, LO,HI )\
	template<> struct numeric_limits<TYPE> : __moss_numeric_limits_integral<TYPE>\
	{\
		static constexpr int digits10     = 0;\
		static constexpr int max_digits10 = 0;\
	\
		static constexpr TYPE min() noexcept { return LO; }\
		static constexpr TYPE max() noexcept { return HI; }\
		static constexpr TYPE lowest() noexcept { return min(); }\
	};

MOSS_DEF_INT( bool              , 0,1, false    ,true             )
MOSS_DEF_INT(          char     , 2,3,  CHAR_MIN, CHAR_MAX        )
MOSS_DEF_INT(   signed char     , 2,3, SCHAR_MIN,SCHAR_MAX        )
MOSS_DEF_INT( unsigned char     , 2,3, 0        ,UCHAR_MAX        )
//MOSS_DEF_INT( wchar_t           , 2,3, WCHAR_MIN,WCHAR_MAX        )
//MOSS_DEF_INT( char8_t           , 2,3, 0        ,UCHAR_MAX        )
//MOSS_DEF_INT( char16_t          , 2,3, 0        ,UINT_LEAST16_MAX )
//MOSS_DEF_INT( char32_t          , 2,3, 0        ,UINT_LEAST32_MAX )
MOSS_DEF_INT(   signed short    , 2,3, SHRT_MIN , SHRT_MAX        )
MOSS_DEF_INT( unsigned short    , 2,3, 0        ,USHRT_MAX        )
MOSS_DEF_INT(   signed int      , 2,3, INT_MIN  , INT_MAX         )
MOSS_DEF_INT( unsigned int      , 2,3, 0        ,UINT_MAX         )
MOSS_DEF_INT(   signed long     , 2,3, LONG_MIN , LONG_MAX        )
MOSS_DEF_INT( unsigned long     , 2,3, 0        ,ULONG_MAX        )
MOSS_DEF_INT(   signed long long, 2,3, LLONG_MIN, LLONG_MAX       )
MOSS_DEF_INT( unsigned long long, 2,3, 0        ,ULLONG_MAX       )

#undef MOSS_DEF_INT



}
