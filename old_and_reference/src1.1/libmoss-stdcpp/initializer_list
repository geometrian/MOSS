#pragma once

/*
https://en.cppreference.com/w/cpp/header/initializer_list

COMPLETE

See also:
	https://stackoverflow.com/questions/18164353/implementation-of-stdinitializer-list
*/

#include "../libmoss-stdc/__size_t.h"



namespace std
{



template< class T >
class initializer_list
{
	public:
		using value_type = T;
		using       reference = T const&;
		using const_reference = T const&;
		using size_type = size_t;

		using       iterator = T const*;
		using const_iterator = T const*;

	private:
		iterator  _first;
		size_type _count;

		//Called by the compiler
		constexpr initializer_list( const_iterator first, size_type count )
			: _first(first), _count(count)
		{}
		constexpr initializer_list( const_iterator first, const_iterator end )
			: _first(first), _count(end-first)
		{}
	public:
		constexpr initializer_list() noexcept : _first(nullptr), _count(0) {}

		constexpr size_type size() const noexcept { return _count; }

		constexpr const_iterator begin() const noexcept { return _first; }
		constexpr const_iterator end  () const noexcept { return begin() + size(); }
};

template< class T >
constexpr T const* begin( initializer_list<T> il ) noexcept { return il.begin(); }
template< class T >
constexpr T const* end  ( initializer_list<T> il ) noexcept { return il.end  (); }



}
