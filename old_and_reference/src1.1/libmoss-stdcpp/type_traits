#pragma once

/*
https://en.cppreference.com/w/cpp/header/type_traits
*/

#include "cstddef"



namespace std
{



template< bool B, class T,class F >
struct conditional            { using type = T; };
template<         class T,class F >
struct conditional<false,T,F> { using type = F; };
template< bool B, class T, class F > using conditional_t = typename conditional<B,T,F>::type;



// Helper Classes
#if 1

template< class T, T val >
struct integral_constant
{
	static constexpr T value = val;

	using value_type = T;
	using type = integral_constant< T, val >;

	constexpr operator value_type() const noexcept { return value; }
	constexpr value_type operator()() const noexcept { return value; }
};

template< bool val > using bool_constant = integral_constant< bool, val >;
using true_type  = bool_constant<true >;
using false_type = bool_constant<false>;

#endif



// `const`-`volatile` Modification
#if 1

template< class T > struct remove_const            { using type = T; };
template< class T > struct remove_const< T const > { using type = T; };
template< class T > using remove_const_t = typename remove_const<T>::type;

template< class T > struct remove_volatile               { using type = T; };
template< class T > struct remove_volatile< volatile T > { using type = T; };
template< class T > using remove_volatile_t = typename remove_volatile<T>::type;

template< class T > struct remove_cv                     { using type = T; };
template< class T > struct remove_cv< T const          > { using type = T; };
template< class T > struct remove_cv< T volatile       > { using type = T; };
template< class T > struct remove_cv< T const volatile > { using type = T; };
template< class T > using remove_cv_t = typename remove_cv<T>::type;

template< class T > struct add_const { using type = T const; };
template< class T > using add_const_t = typename add_const<T>::type;

template< class T > struct add_volatile { using type = T volatile; };
template< class T > using add_volatile_t = typename add_volatile<T>::type;

template< class T > struct add_cv { using type = T const volatile; };
template< class T > using add_cv_t = typename add_cv<T>::type;

#endif



// Primary Type Categories (part 1)
#if 1

template< class T > struct is_union : integral_constant< bool, __is_union(T) > {};
template< class T > inline constexpr bool is_union_v = is_union<T>::value;

namespace _MOSS
{
	template< class T > integral_constant< bool, !is_union_v<T> > is_class( int T::* );
	template< class   > false_type                                is_class( ...      );
}
template< class T > struct is_class : decltype( _MOSS::is_class<T>(nullptr) ) {};
template< class T > inline constexpr bool is_class_v = is_class<T>::value;

#endif



// Type Relationships
#if 1

template< class T, class U > struct is_same         : false_type {};
template< class T          > struct is_same< T, T > : true_type  {};
template< class T, class U > inline constexpr bool is_same_v = is_same<T,U>::value;

namespace _MOSS
{
	template< class B > true_type  test_ptr_conv( B    const volatile* );
	template< class   > false_type test_ptr_conv( void const volatile* );

	template< class B, class D >
	auto test_is_base_of(int) -> decltype(test_ptr_conv<B>( static_cast<D*>(nullptr) ));
	template< class  , class   >
	auto test_is_base_of(...) -> true_type; // private or ambiguous base
}
template< class Base, class Derived > struct is_base_of :
	integral_constant< bool,
		is_class_v<Base> && is_class_v<Derived> &&
		decltype( _MOSS::test_is_base_of<Base,Derived>(0) )::value
	>
{};
template< class Base, class Derived > inline constexpr bool is_base_of_v = is_base_of<Base,Derived>::value;

#if 0
namespace _MOSS
{
	template< class T > auto test_returnable(int) -> decltype(
		void(static_cast<T(*)()>(nullptr)), true_type{}
	);
	template< class   > auto test_returnable(...) -> false_type;

	template< class From, class To > auto test_implicitly_convertible(int) -> decltype(
		void( declval<void(&)(To)>()(declval<From>()) ), true_type{}
	);
	template< class     , class    > auto test_implicitly_convertible(...) -> false_type;
}
template< class From, class To > struct is_convertible :
	integral_constant< bool,
		( decltype( detail::test_returnable            <     To>(0) )::value &&
		  decltype( detail::test_implicitly_convertible<From,To>(0) )::value ) ||
		( is_void_v<From> && is_void_v<To> )
	> {};
template< class From, class To > struct is_nothrow_convertible : conjunction< is_void<From>, is_void<To> > {};
template< class From, class To > requires requires
{
	static_cast<To(*)()>(nullptr);
	{ declval<void(&)(To) noexcept>()(declval<From>()) } noexcept;
}
struct is_nothrow_convertible< From, To > : true_type {};
template< class From, class To >
inline constexpr bool is_convertible_v         = is_convertible<From,To>::value;
template< class From, class To >
inline constexpr bool is_nothrow_convertible_v = is_nothrow_convertible<From,To>::value;

template< class T, class U > struct is_layout_compatible :
	integral_constant< bool, __is_layout_compatible(T,U) > {};
template< class T, class U > inline constexpr bool is_layout_compatible_v =
	is_layout_compatible<T,U>::value;

template< class Base, class Derived > struct is_pointer_interconvertible_base_of :
	integral_constant< bool, __is_pointer_interconvertible_base_of(Base,Derived) > {};
template< class Base, class Derived > inline constexpr bool is_pointer_interconvertible_base_of_v =
	is_pointer_interconvertible_base_of<Base,Derived>::value;

template<            class Fn, class... ArgTypes > struct is_invocable;
template< class Ret, class Fn, class... ArgTypes > struct is_invocable_r;
template<            class Fn, class... ArgTypes > struct is_nothrow_invocable;
template< class Ret, class Fn, class... ArgTypes > struct is_nothrow_invocable_r;
#endif

#endif



// Composite Type Categories (part 1)
#if 1

namespace _MOSS
{
	template< class T          > struct is_member_pointer           : false_type {};
	template< class T, class U > struct is_member_pointer< T U::* > : true_type  {};
}
template< class T > struct is_member_pointer : _MOSS::is_member_pointer< remove_cv_t<T> > {};
template< class T > inline constexpr bool is_member_pointer_v = is_member_pointer<T>::value;

#endif



// Primary Type Categories (part 2)
#if 1

template< class T > struct is_void : is_same< void, remove_cv_t<T> > {};
template< class T > inline constexpr bool is_void_v = is_void<T>::value;

template< class T > struct is_null_pointer : is_same< nullptr_t, remove_cv_t<T> > {};
template< class T > inline constexpr bool is_null_pointer_v = is_null_pointer<T>::value;

template< class T >
struct is_integral : bool_constant<
	requires( T t, T* p, void (*f)(T) ) // `T*` parameter excludes reference types
	{
		reinterpret_cast<T>(t); // Exclude class types
		f(0);                   // Exclude enumeration types
		p + t;                  // Exclude everything not yet excluded except integral types
	}
> {};
template< class T > inline constexpr bool is_integral_v = is_integral<T>::value;

template< class T >
struct is_floating_point : integral_constant<
	bool,
	// Note: standard floating-point types
	is_same_v< float      , remove_cv_t<T> > ||
	is_same_v< double     , remove_cv_t<T> > ||
	is_same_v< long double, remove_cv_t<T> >
	// Note: extended floating-point types (C++23, if supported)
	#if 0
	|| is_same_v< float16_t  , remove_cv_t<T> > ||
	|| is_same_v< float32_t  , remove_cv_t<T> > ||
	|| is_same_v< float64_t  , remove_cv_t<T> > ||
	|| is_same_v< float128_t , remove_cv_t<T> > ||
	|| is_same_v< bfloat16_t , remove_cv_t<T> >
	#endif
> {};
template< class T > inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

template< class T           > struct is_array : false_type {};
template< class T           > struct is_array<T[ ]> : true_type {};
template< class T, size_t N > struct is_array<T[N]> : true_type {};
template< class T > inline constexpr bool is_array_v = is_array<T>::value;

template< class T > struct is_enum : integral_constant< bool, __is_enum(T) > {};
template< class T > inline constexpr bool is_enum_v = is_enum<T>::value;

// (`is_union[_v]`, `is_class[_v]` moved up)

template< class > struct is_function : false_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )                           > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)                           > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const                     > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const                     > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )       volatile            > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)       volatile            > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const volatile            > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const volatile            > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )               &           > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)               &           > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const         &           > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const         &           > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )       volatile&           > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)       volatile&           > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const volatile&           > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const volatile&           > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )               &&          > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)               &&          > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const         &&          > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const         &&          > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )       volatile&&          > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)       volatile&&          > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const volatile&&          > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const volatile&&          > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )                  noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)                  noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const            noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const            noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )       volatile   noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)       volatile   noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const volatile   noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const volatile   noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )               &  noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)               &  noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const         &  noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const         &  noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )       volatile&  noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)       volatile&  noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const volatile&  noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const volatile&  noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )               && noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)               && noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const         && noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const         && noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    )       volatile&& noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...)       volatile&& noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...    ) const volatile&& noexcept > : true_type {};
template< class Ret, class... Args > struct is_function< Ret(Args...,...) const volatile&& noexcept > : true_type {};
template< class T > inline constexpr bool is_function_v = is_function<T>::value;

template< class T > struct is_pointer : false_type {};
template< class T > struct is_pointer< T*                > : true_type {};
template< class T > struct is_pointer< T*const           > : true_type {};
template< class T > struct is_pointer< T*volatile        > : true_type {};
template< class T > struct is_pointer< T *const volatile > : true_type {};
template< class T > inline constexpr bool is_pointer_v = is_pointer<T>::value;

template< class T > struct is_lvalue_reference        : false_type {};
template< class T > struct is_lvalue_reference< T&  > : true_type  {};
template< class T > struct is_rvalue_reference        : false_type {};
template< class T > struct is_rvalue_reference< T&& > : true_type  {};
template< class T > inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;
template< class T > inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;

namespace _MOSS
{
	template< class T          > struct is_member_function_pointer : false_type {};
	template< class T, class U > struct is_member_function_pointer< T U::* > : is_function<T> {};
}
template< class T >
struct is_member_function_pointer : _MOSS::is_member_function_pointer< remove_cv_t<T> > {};
template< class T >
inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<T>::value;

template< class T > struct is_member_object_pointer :
	integral_constant< bool, is_member_pointer_v<T> && !is_member_function_pointer_v<T> >
{};
template< class T > inline constexpr bool is_member_object_pointer_v = is_member_object_pointer<T>::value;

// `is_member_function_pointer[_v]` moved just up above

#endif



// Composite Type Categories (part 2)
#if 1

template< class T >
struct is_arithmetic : integral_constant< bool, is_integral_v<T> || is_floating_point_v<T> > {};
template< class T > inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

template< class T >
struct is_fundamental :
	integral_constant< bool, is_arithmetic_v<T> || is_void_v<T> || is_null_pointer_v<T> > {};
template< class T > inline constexpr bool is_fundamental_v = is_fundamental<T>::value;

// (`is_arithmetic[_v]` moved just up above)

template< class T >
struct is_scalar : integral_constant<
	bool,
	is_arithmetic_v<T> || is_enum_v<T> || is_pointer_v<T> ||
	is_member_pointer_v<T> || is_null_pointer_v<T>
> {};
template< class T > inline constexpr bool is_scalar_v = is_scalar<T>::value;

template< class T > struct is_object :
	integral_constant< bool, is_scalar_v<T> || is_array_v<T> || is_union_v<T> || is_class_v<T> >
{};
template< class T > inline constexpr bool is_object_v = is_object<T>::value;

template< class T > struct is_compound : integral_constant< bool, !is_fundamental_v<T> > {};
template< class T > inline constexpr bool is_compound_v = is_compound<T>::value;

template< class T > struct is_reference        : false_type {};
template< class T > struct is_reference< T& >  : true_type  {};
template< class T > struct is_reference< T&& > : true_type  {};
template< class T > inline constexpr bool is_reference_v = is_reference<T>::value;

// (`is_member_pointer[_v]` moved up)

#endif



// Type Properties
#if 1

template< class T > struct is_const            : false_type {};
template< class T > struct is_const< T const > : true_type  {};
template< class T > inline constexpr bool is_const_v = is_const<T>::value;

template< class T > struct is_volatile               : false_type {};
template< class T > struct is_volatile< T volatile > : true_type  {};
template< class T > inline constexpr bool is_volatile_v = is_volatile<T>::value;

template< class T >
struct is_trivial : integral_constant< bool,
	#if __has_feature(is_trivial)
		__is_trivial(T)
	#else
		is_trivially_copyable_v<T> && is_trivially_default_constructible_v<T>
	#endif
> {};
template< class T > inline constexpr bool is_trivial_v = is_trivial<T>::value;

template< class T > struct is_trivially_copyable :
	integral_constant< bool, __is_trivially_copyable(T) > {};
template< class T > inline constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;

template< class T > struct is_standard_layout :
	integral_constant< bool, __is_standard_layout(T) > {};
template< class T > inline constexpr bool is_standard_layout_v = is_standard_layout<T>::value;

template< class T > struct is_empty : integral_constant< bool, __is_empty(T) > {};
template< class T > inline constexpr bool is_empty_v = is_empty<T>::value;

namespace _MOSS
{
	template< class T >
	true_type is_polymorphic(
		decltype(dynamic_cast<const volatile void *>(static_cast<T *>(nullptr))));
	template< class T >
	false_type is_polymorphic(...);
}
template< class T > struct is_polymorphic : decltype(_MOSS::is_polymorphic<T>(nullptr)) {};
template< class T > inline constexpr bool is_polymorphic_v = is_polymorphic<T>::value;

template< class T > struct is_abstract : integral_constant< bool, __is_abstract(T) > {};
template< class T > inline constexpr bool is_abstract_v = is_abstract<T>::value;

template< class T > struct is_final : integral_constant< bool, __is_final(T) > {};
template< class T > inline constexpr bool is_final_v = is_final<T>::value;

template< class T > struct is_aggregate : integral_constant< bool, __is_aggregate(T) > {};
template< class T > inline constexpr bool is_aggregate_v = is_aggregate<T>::value;

#if 0
template< class T > struct is_implicit_lifetime :
	integral_constant< bool, __is_implicit_lifetime(T) > {};
template< class T > inline constexpr bool is_implicit_lifetime_v = is_implicit_lifetime<T>::value;
#endif

namespace _MOSS
{
	template< class T, bool=is_arithmetic_v<T> > struct is_signed   :
		integral_constant< bool, T(-1)<T(0) > {};
	template< class T, bool=is_arithmetic_v<T> > struct is_unsigned :
		integral_constant< bool, T(0)<T(-1) > {};

	template< class T > struct is_signed  < T, false > : false_type {};
	template< class T > struct is_unsigned< T, false > : false_type {};
}
template< class T > struct is_signed   : _MOSS::is_signed  <T>::type {};
template< class T > struct is_unsigned : _MOSS::is_unsigned<T>::type {};
template< class T > inline constexpr bool is_signed_v   = is_signed  <T>::value;
template< class T > inline constexpr bool is_unsigned_v = is_unsigned<T>::value;

template< class T >
struct is_bounded_array : integral_constant< bool, __is_bounded_array(T) > {};
template< class T > inline constexpr bool is_bounded_array_v = is_bounded_array<T>::value;

template< class T >
struct is_unbounded_array : integral_constant< bool, __is_unbounded_array(T) > {};
template< class T > inline constexpr bool is_unbounded_array_v = is_unbounded_array<T>::value;

#if 0
template< class E > struct is_scoped_enum : bool_constant<
	requires
	{
		requires is_enum_v<E>;
		requires !is_convertible_v< E, underlying_type_t<E> >;
	}
> {};
template< class T > inline constexpr bool is_scoped_enum_v = is_scoped_enum<T>::value;
#endif

#endif



// Supported Operations TODO
#if 0

template< class T, class... Args > struct is_constructible;
template< class T > struct is_default_constructible;
template< class T > struct is_copy_constructible;
template< class T > struct is_move_constructible;

template< class T, class U > struct is_assignable;
template< class T > struct is_copy_assignable;
template< class T > struct is_move_assignable;

template< class T, class U > struct is_swappable_with;
template< class T > struct is_swappable;

template< class T > struct is_destructible;

template< class T, class... Args > struct is_trivially_constructible;
template< class T > struct is_trivially_default_constructible;
template< class T > struct is_trivially_copy_constructible;
template< class T > struct is_trivially_move_constructible;

template< class T, class U > struct is_trivially_assignable;
template< class T > struct is_trivially_copy_assignable;
template< class T > struct is_trivially_move_assignable;
template< class T > struct is_trivially_destructible;

template< class T, class... Args > struct is_nothrow_constructible;
template< class T > struct is_nothrow_default_constructible;
template< class T > struct is_nothrow_copy_constructible;
template< class T > struct is_nothrow_move_constructible;

template< class T, class U > struct is_nothrow_assignable;
template< class T > struct is_nothrow_copy_assignable;
template< class T > struct is_nothrow_move_assignable;

template< class T, class U > struct is_nothrow_swappable_with;
template< class T > struct is_nothrow_swappable;

template< class T > struct is_nothrow_destructible;

template< class T > struct has_virtual_destructor;

template< class T > struct has_unique_object_representations;

template< class T, class U > struct reference_constructs_from_temporary;
template< class T, class U > struct reference_converts_from_temporary;

#endif



// Property Queries
#if 1

template< class T > struct alignment_of : integral_constant< size_t, alignof(T) > {};
template< class T > inline constexpr size_t alignment_of_v = alignment_of<T>::value;

template< class T           > struct rank       : integral_constant< size_t, 0 > {};
template< class T           > struct rank<T[ ]> : integral_constant< size_t, rank<T>::value+1 > {};
template< class T, size_t N > struct rank<T[N]> : integral_constant< size_t, rank<T>::value+1 > {};
template< class T > inline constexpr size_t rank_v = rank<T>::value;

template< class T,           unsigned N=0 > struct extent            : integral_constant< size_t, 0 > {};
template< class T                         > struct extent< T[ ], 0 > : integral_constant< size_t, 0 > {};
template< class T,           unsigned N   > struct extent< T[ ], N > : extent< T, N-1 > {};
template< class T, size_t I               > struct extent< T[I], 0 > : integral_constant< size_t, I > {};
template< class T, size_t I, unsigned N   > struct extent< T[I], N > : extent< T, N-1 > {};
template< class T, unsigned N=0 > inline constexpr size_t extent_v = extent<T,N>::value;

#endif



// Type Relationships



// `const`-`volatile` Modification (moved up)



// References
#if 1

template< class T > struct remove_reference      { using type = T; };
template< class T > struct remove_reference<T& > { using type = T; };
template< class T > struct remove_reference<T&&> { using type = T; };
template< class T > using remove_reference_t = typename remove_reference<T>::type;

namespace _MOSS
{
	template< class T > struct type_identity { using type = T; }; // or use type_identity (since C++20)

	template< class T > auto try_add_lvalue_reference(int) -> type_identity<T& >; // Note that `cv void&` is a substitution failure
	template< class T > auto try_add_lvalue_reference(...) -> type_identity<T  >; // Handle T = cv void case

	template< class T > auto try_add_rvalue_reference(int) -> type_identity<T&&>;
	template< class T > auto try_add_rvalue_reference(...) -> type_identity<T  >;
}
template< class T > struct add_lvalue_reference : decltype( _MOSS::try_add_lvalue_reference<T>(0) ) {};
template< class T > struct add_rvalue_reference : decltype( _MOSS::try_add_rvalue_reference<T>(0) ) {};
template< class T > using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;
template< class T > using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

#endif



// Pointers
#if 1

template< class T > struct remove_pointer                      { using type = T; };
template< class T > struct remove_pointer< T*                > { using type = T; };
template< class T > struct remove_pointer< T* const          > { using type = T; };
template< class T > struct remove_pointer< T*       volatile > { using type = T; };
template< class T > struct remove_pointer< T* const volatile > { using type = T; };
template< class T > using remove_pointer_t = typename remove_pointer<T>::type;

namespace _MOSS
{
	template< class T > auto try_add_pointer(int) -> type_identity<remove_reference_t<T>*>;  // usual case
	template< class T > auto try_add_pointer(...) -> type_identity<T>;  // unusual case (cannot form remove_reference<T>::type*)
}
template< class T > struct add_pointer : decltype(_MOSS::try_add_pointer<T>(0)) {};
template< class T > using add_pointer_t = typename add_pointer<T>::type;

#endif



// Sign Modifiers TODO
#if 0
#endif



// Arrays
#if 1

template< class T           > struct remove_extent       { using type = T; };
template< class T           > struct remove_extent<T[ ]> { using type = T; };
template< class T, size_t N > struct remove_extent<T[N]> { using type = T; };
template< class T > using remove_extent_t = typename remove_extent<T>::type;

template< class T           > struct remove_all_extents       { using type = T;                                    };
template< class T           > struct remove_all_extents<T[ ]> { using type = typename remove_all_extents<T>::type; };
template< class T, size_t N > struct remove_all_extents<T[N]> { using type = typename remove_all_extents<T>::type; };
template< class T > using remove_all_extents_t = typename remove_all_extents<T>::type;

#endif



// Misc. Transforms TODO
#if 0
#endif



// Operations on Traits TODO
#if 0
#endif



// Functions TODO
#if 0
#endif



}
