#pragma once

/*
https://en.cppreference.com/w/cpp/header/iterator
*/

#include "type_traits"



namespace std
{



struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag : input_iterator_tag {};
struct bidirectional_iterator_tag : forward_iterator_tag {};
struct random_access_iterator_tag : bidirectional_iterator_tag {};
struct contiguous_iterator_tag : random_access_iterator_tag {};



template< class Iter >
struct iterator_traits
{
	using value_type = Iter::value_type;
	using difference_type = Iter::difference_type;

	using pointer   = Iter::pointer  ;
	using reference = Iter::reference;

	using iterator_category = Iter::iterator_category;
};

template< class T >
struct iterator_traits<T*>
{
	using value_type = remove_cv_t<T>;
	using difference_type = ptrdiff_t;

	using pointer   = T*;
	using reference = T&;

	using iterator_category = random_access_iterator_tag;
	using iterator_concept  = contiguous_iterator_tag   ;
};



template< class Iter, class Dist >
constexpr void advance( Iter& iter, Dist dist )
{
	using category = typename iterator_traits<Iter>::iterator_category;
	static_assert(is_base_of_v<input_iterator_tag, category>);
 
	auto dist_tmp = typename iterator_traits<Iter>::difference_type( dist );
	if constexpr (is_base_of_v<random_access_iterator_tag, category>)
	{
		iter += dist_tmp;
	}
	else
	{
		while ( dist_tmp > 0 )
		{
			--dist_tmp;
			++iter;
		}
		if constexpr (is_base_of_v< bidirectional_iterator_tag, category >)
		{
			while ( dist_tmp < 0 )
			{
				++dist_tmp;
				--iter;
			}
		}
	}
}

template< class BidirIter >
constexpr BidirIter prev( BidirIter iter, typename iterator_traits<BidirIter>::difference_type dist=1 )
{
	advance( iter, -dist );
	return iter;
}



template< class InpIter > constexpr
typename iterator_traits<InpIter>::difference_type distance( InpIter first, InpIter last )
{
	using category = typename iterator_traits<InpIter>::iterator_category;
	static_assert( is_base_of_v<input_iterator_tag, category> );

	if constexpr (is_base_of_v< random_access_iterator_tag, category >)
	{
		return last - first;
	}
	else
	{
		typename iterator_traits<InpIter>::difference_type result = 0;
		while ( first != last ) { ++first; ++result; }
		return result;
	}
}



template< class Iter >
class reverse_iterator
{
	protected:
		Iter current = Iter();

	public:
		reverse_iterator() = default;
		constexpr explicit reverse_iterator( Iter iter ) : current(iter) {}
		template< class U > //requires( !is_same_v<U,Iter> && convertible_to<U const&,Iter> )
		constexpr explicit reverse_iterator( U const& other ) : current(other.base()) {}
	
		constexpr decltype(auto) operator*() const { return *prev(current); }
	
		constexpr reverse_iterator& operator++(   ) { --current; return *this; }
		constexpr reverse_iterator  operator++(int) { auto tmp=*this; ++*this; return tmp; }
	
		constexpr reverse_iterator& operator--(   ) { ++current; return *this; }
		constexpr reverse_iterator  operator--(int) { auto tmp=*this; --*this; return tmp; }
	
		constexpr Iter base() const { return current; }
};



}
