#include "isr.h"

#include "../../includes.h" //For magic breakpoint

#include "../input/devices/controller_ps2.h"
#include "../input/devices/interface_device_ps2.h"

#include "../ata/ata.h"

#include "../kernel.h"

#include "pic.h"


namespace MOSS { namespace Interrupts {


//Exactly what the lower interrupts (0-31) are is very inconsistent accross the web, and sources frequently disagree, especially about
//certain interrupts.  The authoritative source for MOSS is taken to be the Intel Manual
//(http://www.intel.com/Assets/en_US/PDF/manual/253668.pdf, around page 233), listed along with mnemonic (if available) and type.
//Where conflicting (or extra), other sources' input is listed on tab-indented lines below.

//One alternate source: http://www.osdever.net/bkerndev/Docs/isrs.htm

//"#DE": Fault: Divide Error (generated by "div", "idiv")
//No error code
//	Also divide by 0 exception
void isr0(void) {
	kernel->write("Handling divide-by-zero (stub)\n");
}

//"#DB": (Fault/Trap): RESERVED (for Intel use only)
//No error code
//	Debug exceptions/single step (debugger) (trap xor fault)  Error code: "None. Can be retrived from debug registers"; see http://www.brokenthorn.com/Resources/OSDev15.html.
void isr1(void) {
	ASSERT(false,"Got Intel-reserved exception 1!");
}

//     : (Interrupt): NMI Interrupt (generated by a nonmaskable, external interrupt)
//No error code
//	Intel reserved/non-maskable interrupt (NMI) pin (unclassed/trap).
void isr2(void) {
	kernel->write("Handling NMI (stub)\n");
}

//"#BP": (Trap): Breakpoint (generated by "int $0x3")
//No error code
//	Breakpoint exception (debugger).
void isr3(void) {
	kernel->write("Handling breakpoint (stub)\n");
}

//"#OF": (Trap): Overflow (generated by "int0")
//No error code
//	Overflow/"Into detected overflow" (trap).
void isr4(void) {
	kernel->write("Handling overflow (stub)\n");
}

//"#BR": (Fault): BOUND Range Exceeded (generated by "bound")
//No error code
//	Bounds check/out of bound exception (trap/fault?).
void isr5(void) {
	kernel->write("Handling bounds exceeded (stub)\n");
}

//"#UD": (Fault): Invalid Opcode (Undefined Opcode) (generated by "ud2" (Pentium Pro+) or reserved opcode)
//No error code
//	Invalid/undefined opcode exception (trap/fault?).
void isr6(void) {
	kernel->write("Handling invalid opcode (stub)\n");
}

//"#NM": (Fault): Device Not Available (No Math Coprocessor) (generated by a floating-point or "wait"/"fwait" instruction)
//No error code
//	Coprocessor not available/device not available exception (trap/fault?).
void isr7(void) {
	kernel->write("Handling no math (stub)\n");
}

//"#DF": (Abort): Double Fault (generated by any instruction that can generate an exception, NMI, or an interrupt)
//Has error code (always 0)
void isr8(ErrorCode/* error*/) {
	kernel->write("Handling double-fault (stub)\n");
}

//     : (Fault): Coprocessor Segment Overrun (reserved) (generated by a floating-point instruction)
//No error code
//Processors after the i386 do not generate this exception.
//	do not use (abort?/fault).
void isr9(void) {
	ASSERT(false,"Got Intel-reserved exception 9!");
}

//"#TS": (Fault): Invalid TSS (generated by task switch or TSS access)
//Has error code
void isr10(ErrorCode/* error*/) {
	kernel->write("Handling TSS (stub)\n");
}

//"#NP": (Fault): Segment Not Present (generated by loading segment registers or accessing system segments)
//Has error code
void isr11(ErrorCode/* error*/) {
	kernel->write("Handling segment (stub)\n");
}

//"#SS": (Fault): Stack-Segment Fault (generated by stack operations or "ss" register loads)
//Has error code
//	Stack fault exception/stack segment overrun (fault).
void isr12(ErrorCode/* error*/) {
	kernel->write("Handling stack (stub)\n");
}

//"#GP": (Fault): General Protection (generated by any memory reference or other protection checks)
//Has error code
//	General protection exception/general protection fault/triple fault (fault xor trap).
void isr13(ErrorCode/* error*/) {
	kernel->write("Handling GPF (stub)\n");
}

//"#PF": (Fault): Page Fault (generated by any memory reference)
//Has error code
void isr14(ErrorCodePF/* error*/) {
	kernel->write("Handling PF (stub)\n");
}

//     : (Unlisted): Intel reserved.  Do not use.
//No error code
//	Intel reserved?/unassigned.
void isr15(void) {
	ASSERT(false,"Got Intel-reserved exception 15!");
}

//"#MF": (Fault): x87 FPU Floating-Point Error (Math Fault) (generated by x87 FPU floating-point or "wait"/"fwait" instruction)
//No error code
//	Coprocessor error/x87 FPU floating-point error (math fault) (fault).  No error code (x87 FPU provides own error information).
void isr16(void) {
	kernel->write("Handling FPU (stub)\n");
}

//"#AC": (Fault): Alignment Check (generated by any data reference in memory)
//Has error code (always 0)
//i486+ only
//	exception.
//	Different sources disagree about whether it has an error code.  E.g.
//		http://www.acm.uiuc.edu/sigops/roll_your_own/i386/idt.html says none
//		http://www.brokenthorn.com/Resources/OSDev15.html says there is one and it's always 0
//		The last post here: http://forum.osdev.org/viewtopic.php?f=1&t=23998&sid=98cd3b1e6b1256f0dbdb0885e84ba05f&start=15 mentions this issue.
void isr17(ErrorCode/* error*/) {
	kernel->write("Handling alignment (stub)\n");
}

//"#MC": (Abort): Machine Check (generation method(s) unlisted)
//No error code, although Intel manual implies that there may be error codes, and if so, that they are model-dependent.
//Introduced in Pentium, improved in P6 family
//	Machine check exception (Pentium/586+ only) (abort).  No error code (MSRs provide error information).
void isr18(void) {
	kernel->write("Handling machine check (stub)\n");
}

//"#XM": (Fault): SIMD Floating-Point Exception (generated by SSE/SSE2/SSE3 floating-point instructions).
//No error code
//Pentium III+ only
//	SIMD FPU exception (fault).
void isr19(void) {
	kernel->write("Handling SIMD FPU (stub)\n");
}

//     : (Unlisted): Intel reserved.  Do not use.
//Whether has error code is unlisted
void isr20through31(void) {
	ASSERT(false,"Got Intel reserved interrupt [20,31]!");
}

//     : (Interrupt): User-Defined (Non-reserved) Interrupts (generated by external iterrupt or "int _" instruction)
//No error codes (either called by PICs or "int" instructions, neither of which push error codes.
//<All the rest of the ISRs>


//The first 16 are where the PICs' output is remapped, so the description for each ISR is the description of the IRQ it handles (see http://wiki.osdev.org/Interrupts)

//ISR 32 = IRQ 0 (Programmable Interrupt Timer Interrupt)
bool isr32(void) {
	//For now, we just ignore the timer
	return true;
}

//ISR 33 = IRQ 1 (Keyboard Interrupt)
bool isr33(void) {
	//kernel->write("YAY!");
	//ASSERT(false,"Handling IRQ 1 (stub)\n"); return false; //TODO: The line below is not properly implemented yet
	return kernel->controller_ps2->device0->handle_irq();
}

//ISR 34 = IRQ 2 (Cascade (used internally by the two PICs. never raised))
bool isr34(void) {
	ASSERT(false,"Handling IRQ 2 (stub)\n"); return false;
}

//ISR 35 = IRQ 3 (COM2 (if enabled))
bool isr35(void) {
	ASSERT(false,"Handling IRQ 3 (stub)\n"); return false;
}

//ISR 36 = IRQ 4 (COM1 (if enabled))
bool isr36(void) {
	ASSERT(false,"Handling IRQ 4 (stub)\n"); return false;
}

//ISR 37 = IRQ 5 (LPT2 (if enabled))
bool isr37(void) {
	ASSERT(false,"Handling IRQ 5 (stub)\n"); return false;
}

//ISR 38 = IRQ 6 (Floppy Disk)
bool isr38(void) {
	ASSERT(false,"Handling IRQ 6 (stub)\n"); return false;
}

//ISR 39 = IRQ 7 (LPT1 / Unreliable "spurious" interrupt (usually))
bool isr39(void) {
	ASSERT(false,"Handling IRQ 7 (stub)\n"); return false;
}

//ISR 40 = IRQ 8 (CMOS real-time clock (if enabled))
bool isr40(void) {
	ASSERT(false,"Handling IRQ 8 (stub)\n"); return false;
}

//ISR 41 = IRQ 9 (Free for peripherals / legacy SCSI / NIC)
bool isr41(void) {
	ASSERT(false,"Handling IRQ 9 (stub)\n"); return false;
}

//ISR 42 = IRQ 10 (Free for peripherals / SCSI / NIC)
bool isr42(void) {
	ASSERT(false,"Handling IRQ 10 (stub)\n"); return false;
}

//ISR 43 = IRQ 11 (Free for peripherals / SCSI / NIC)
bool isr43(void) {
	ASSERT(false,"Handling IRQ 11 (stub)\n"); return false;
}

//ISR 44 = IRQ 12 (PS2 Mouse)
bool isr44(void) {
	return kernel->controller_ps2->device1->handle_irq();
}

//ISR 45 = IRQ 13 (FPU / Coprocessor / Inter-processor)
bool isr45(void) {
	ASSERT(false,"Handling IRQ 13 (stub)\n"); return false;
}

//ISR 46 = IRQ 14 (Primary ATA Hard Disk)
bool isr46(void) {
	//ASSERT(false,"Handling IRQ 14 (stub)\n"); return false;
	kernel->controller_ata->handle_irq();
	return true;
}

//ISR 47 = IRQ 15 (Secondary ATA Hard Disk)
bool isr47(void) {
	ASSERT(false,"Handling IRQ 15 (stub)\n"); return false;
}

//Unassigned [48,255] (208)

bool IQR_ISR::operator()(void) const {
	return (isr==NULL) ? def() : isr();
}

IQR_ISR irq_isrs[16];

void init_irqs(void) {
	//Modules/devices can come along and override the default ISRs for IRQs, but they need to be function pointers to allow that.

	for (int i=0;i<16;++i) {
		irq_isrs[i].isr = NULL;
	}
	#define SETUP_ISR(DEFAULT_ISR_INDEX) irq_isrs[DEFAULT_ISR_INDEX-32].def = isr##DEFAULT_ISR_INDEX;
		SETUP_ISR(32) irq_isrs[0].isr=irq_isrs[0].def;
		SETUP_ISR(33)
		SETUP_ISR(34)
		SETUP_ISR(35)
		SETUP_ISR(36)
		SETUP_ISR(37)
		SETUP_ISR(38)
		SETUP_ISR(39)
		SETUP_ISR(40)
		SETUP_ISR(41)
		SETUP_ISR(42)
		SETUP_ISR(43)
		SETUP_ISR(44)
		SETUP_ISR(45)
		SETUP_ISR(46)
		SETUP_ISR(47)
	#undef SETUP_ISR
}


void isr_common(State* state) {
	//MOSS_DEBUG_BOCHSBREAK;

	//See sign-extending about unsigned bytes here: http://forum.osdev.org/viewtopic.php?f=1&t=23998&sid=98cd3b1e6b1256f0dbdb0885e84ba05f&start=15.
	//Shouldn't be an issue since everything pushed is 32 bits.

	uint32_t& which = state->int_ind;

	/*kernel->write("Received interrupt:\n");
	kernel->write("  Interrupt index: %d\n",state->int_ind);
	kernel->write("  Error code:      %d\n",state->err_code);
	if (state->err_code == 14) {
		kernel->write("    Is special error code for page faults (interrupt 14):\n");
		kernel->write("    Diagnostic output not implemented!\n"); //TODO: this
	} else {
		kernel->write("    Is normal error code for exceptions:\n");

		union {
			uint32_t data;
			ErrorCode code;
		} convert;
		ErrorCode code = convert.code;

		if (code.external_event==0) {
			kernel->write("      0 : ?\n");
		} else {
			kernel->write("      1 : <External Event>\n");
		}

		if (code.descr_location==0) {
			if (code.descr_in_LDT==0) {
				kernel->write("      0 : index into GDT\n");
			} else {
				kernel->write("      1 : index into LDT\n");
			}
		} else {
			kernel->write("      1 : index is into IDT\n");
		}

		kernel->write("      %d\n",code.segement_selector_index);
	}
	kernel->write("Delegating\n");*/

	//kernel->write("Got interrupt %d!\n",which);

	ASSERT(which<=255,"Got interrupt that was outside the ISR table!");
	ASSERT(which<=47,"Got interrupt that was unallocated!");
	if (which>=32) { //remapped IRQ from a PIC
		bool handled = true;
		switch (which) {
			case 32: handled&=isr32(); break;
			case 33: handled&=isr33(); break;
			case 34: isr34(); break;
			case 35: isr35(); break;
			case 36: isr36(); break;
			case 37: isr37(); break;
			case 38: isr38(); break;
			case 39: isr39(); break;
			case 40: isr40(); break;
			case 41: isr41(); break;
			case 42: isr42(); break;
			case 43: isr43(); break;
			case 44: handled&=isr44(); break;
			case 45: isr45(); break;
			case 46: handled&=isr46(); break;
			case 47: isr47(); break;
		}
		if (handled) {
			//Tell the PIC that we handled the interrupt and that it can send another/reset hardware interrupt at 8259 chip
			//The only reason why we wouldn't is if the interrupt was erroneous (spurious, for example).
			Interrupts::PIC::send_EOI(which);
		}
	} else {
		ASSERT(which<=19,"Got interrupt from Intel reserved area!");
		switch (which) {
			#define ERRORCODE_ISR_CASE(I,TYPE) case I: {\
				union {\
					uint32_t data;\
					TYPE code;\
				} convert;\
				convert.data = state->err_code;\
				isr##I(convert.code);\
				break;\
			}
			case  0:  isr0(); break;
			case  1:  isr1(); break;
			case  2:  isr2(); break;
			case  3:  isr3(); break;
			case  4:  isr4(); break;
			case  5:  isr5(); break;
			case  6:  isr6(); break;
			case  7:  isr7(); break;
			ERRORCODE_ISR_CASE( 8,  ErrorCode)
			case  9:  isr9(); break;
			ERRORCODE_ISR_CASE(10,  ErrorCode)
			ERRORCODE_ISR_CASE(11,  ErrorCode)
			ERRORCODE_ISR_CASE(12,  ErrorCode)
			ERRORCODE_ISR_CASE(13,  ErrorCode)
			ERRORCODE_ISR_CASE(14,ErrorCodePF)
			case 15: isr15(); break;
			case 16: isr16(); break;
			ERRORCODE_ISR_CASE(17,  ErrorCode)
			case 18: isr18(); break;
			case 19: isr19(); break;
			#undef ERRORCODE_ISR_CASE
		}
	}
}


}}