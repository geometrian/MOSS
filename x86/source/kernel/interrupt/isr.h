#pragma once
#include "../../includes.h"


namespace MOSS { namespace Interrupts {


//Interrupts are either faults, traps, aborts, xor none of these (unclassed).  We store interrupt vectors
//in the IDT, essentially defining callbacks to be used for each one.  That's what the following
//Interrupt Service Routines (ISRs) are.  ISRs are also called interrupt vectors.
//See http://www.brokenthorn.com/Resources/OSDev15.html.

//See http://wiki.osdev.org/Interrupts
//Exceptions are generated internally by the CPU.  They are the first 32 interrupt vectors.
//Interrupt Requests (IRQs)/Hardware Interrupts are generated externally by a chipset.
//	--An IRQ coming from a device enters the Programmable Interrupt Controller (PIC), which translates
//	  the IRQ into an interrupt vector.  The PIC sends an interrupt on that vector, notifying the CPU.
//	--To which interrupt vector the PIC translates the IRQ must be programmed.  By default, IRQs [0,7]
//	  correspond to interrupt vectors [8,15] and IRQs [8,15] correspond to interrupt vectors [112,119].
//	--Most computers actually have two PICs, handling 16 IRQs.
//	--IRQs have a priority.  Presumably only on systems with two PICs, the priorities run, decreasing:
//	  0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 3, 4, 5, 6, 7
//Software interrupts are generated by software with the "int" instruction.  Oft-used for system calls.

//http://www.osdever.net/bkerndev/Docs/isrs.htm

typedef unsigned char ErrorCode;

//Divide by 0 exception (fault).
void isr0(void) {}

//Debug exceptions/single step (debugger) (trap xor fault)  Error code: "None. Can be retrived from debug registers"; see http://www.brokenthorn.com/Resources/OSDev15.html.
void isr1(void) {}

//Intel reserved/non-maskable interrupt (NMI) pin (unclassed).
void isr2(void) {}

//Breakpoint exception (debugger) (trap).
void isr3(void) {}

//Overflow/"Into detected overflow" (trap).
void isr4(void) {}

//Bounds check/out of bound exception (fault).
void isr5(void) {}

//Invalid/undefined opcode exception (fault).
void isr6(void) {}

//Coprocessor not available/device not available exception(fault).
void isr7(void) {}

//Double fault (abort).  Error code always 0.
void isr8(ErrorCode error) {}

//Coprocessor segment overrun (reserved; do not use) (abort).
void isr9(void) {}

//Invalid task state segment (TSS).  TODO: Error code below
void isr10(ErrorCode error) {}

//Segment not present (fault).  TODO: Error code below
void isr11(ErrorCode error) {}

//Stack fault exception/stack segment overrun (fault).  TODO: Error code below
void isr12(ErrorCode error) {}

//General protection exception/General protection fault (triple fault).  TODO: Error code below
void isr13(ErrorCode error) {}

//Page fault (fault).  TODO: Error code below
void isr14(ErrorCode error) {}

//Intel reserved?/unassigned
void isr15(void) {}

//Coprocessor error/x87 FPU error (fault).  No error code (x87 FPU provides own error information).
void isr16(void) {}

//Alignment check exception (486+ only) (fault).  Error code always 0.  No error code?
void isr17(ErrorCode error) {}

//Machine check exception (Pentium/586+ only) (abort).  No error code (MSRs provide error information).
void isr18(void) {}

//SIMD FPU exception (fault).
void isr19(void) {}

//Intel reserved
void isr20through31(void) {}

//Available for software use
void isr32through255(void) {}


}}