The Interrupt Descriptor Table (IDT) stores a table of 256 "interrupt vector"s, each of which is a pointer to an Interrupt
Service Routine (ISR).  When something wants to interrupt the CPU, it does so by calling into the IDT on a particular interrupt
vector.  This has the effect of calling the ISR.

Interrupts come in two types.

Software interrupts, or exceptions, include faults, traps, and aborts.  Exceptions are generated internally by the CPU.  They
are generally the first 32 interrupt vectors.  Assembly code can also generate software interrupts on any vector with the "int"
instruction.  This latter method is oft-used for system calls.

Hardware interrupts, or Interrupt Requests (IRQs), are generated externally by a chipset.  An IRQ coming from a device enters
the Programmable Interrupt Controller (PIC), which translates the IRQ into an interrupt vector.  The PIC sends an interrupt
on that vector, thus notifying the CPU.  Each PIC can translate 8 IRQs into 8 interrupt vectors.  However, most computers
actually have two PICs, thus handling 16 IRQs (actually kinda 15).  By default, IRQs [0,7] correspond to interrupt vectors
[8,15] and IRQs [8,15] correspond to interrupt vectors [112,119].  This is bad since many software interrupts are in these
interrupt vectors.  To fix this, the PIC is remapped so that, in MOSS, the IRQs [0,15] correspond to interrupt vectors [32,47].
IRQs have a priority.  Presumably only on systems with two PICs, the priorities run, decreasing: 0, 1, 2, 8, 9, 10, 11, 12, 13,
14, 15, 3, 4, 5, 6, 7.  Hardware interrupts can be enabled/disabled with "sti"/"cli".  GRUB starts the kernel with hardware
interrupts disabled.  After loading the GDT and IDT, MOSS enables them.

//The GRUB documentation http://www.gnu.org/software/grub/manual/multiboot/multiboot.html implies
	//	that interrupts are already disabled.  That's good, because the following allows us to deal with
	//	them for the first time.

When an interrupt happens, "eflags", "cs", "eip", and (possibly) an error code are pushed onto the stack before the ISR is
called (Intel Manual ~pg. 248).

;Note: The ISRs/common subroutine do NOT issue "cli" or "sti".  So, if the ISR services an exception, the CPU could still be
;interrupted by an IRQ.  However, if the ISR services an IRQ, the CPU automatically disables interrupts for the duration of the
;ISR (when leaving, "iret" pops "eflags" back, which includes the original (enabled) state of the interrupts).  This seems agreed
;upon to be the Right Thing.  The practical upshot of all this is that "cli" and "sti" are wastes of time.  See also
;http://forum.osdev.org/viewtopic.php?f=1&t=20572.

;Note: the original link pushed bytes onto the stack for the dummy error code and the interrupt index.  The stack is 4-byte
;aligned, so two bytes took up eight on the stack and the effect was the same.  However, this is much more clear.  See also
;http://forum.osdev.org/viewtopic.php?f=1&t=23998&start=0.

See http://www.brokenthorn.com/Resources/OSDev15.html.
See http://wiki.osdev.org/Interrupts